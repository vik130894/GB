#Задание 1

class Matrix:

    def __init__(self, my_matrix):
        self.my_matrix = my_matrix

    def __str__(self):
        return self.my_matrix

    def __add__(self, other):
        for i in range(len(self.my_matrix)):
            for i_2 in range(len(other.my_matrix[i])):
                self.my_matrix[i][i_2] = self.my_matrix[i][i_2] + other.my_matrix[i][i_2]
        return Matrix.__str__(self)


m = Matrix([[-4, 1, 1], [-2, 0, 3], [0, 4, -1], [2, 1, -2]])
new_m = Matrix([[-1, 0, 3], [-1, 0, 1], [0, 2, -2], [1, 2, -5]])
print(m.__add__(new_m))

#Задание 2

from abc import ABC, abstractmethod


class Clothes(ABC):
    def __init__(self, param):
        self.param = param

    @abstractmethod
    def show_name(self):
        pass

    @property
    def consumption(self):
        return f"Сумма затраченной ткани на одежду:{(self.param / 6.5 + 0.5) + (2 * self.param + 0.3)}"


class Coat(Clothes):
    def consumption(self):
        return f"Для пошива пальто требуется :{self.param / 6.5 + 0.5} ткани"

    def show_name(self):
        print("Пальто")


class Suit(Clothes):
    def consumption(self):
        return f"Для пошива костюма требуется :{2 * self.param + 0.3} ткани"

    def show_name(self):
        print("Костюм")


coat = Coat(58)
suit = Suit(167)
print(coat.consumption())
print(suit.consumption())
suit.show_name()

#Задание 3

